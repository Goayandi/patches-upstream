From 30354b89336115268bac880ef6c290eb326aad8b Mon Sep 17 00:00:00 2001
From: Dietmar Eggemann <dietmar.eggemann@arm.com>
Date: Wed, 28 Jan 2015 15:56:22 +0000
Subject: [PATCH 43/48] sched: Introduce energy awareness into detach_tasks

Energy-aware load balancing does not rely on env->imbalance but instead it
evaluates the system-wide energy difference for each task on the src rq by
potentially moving it to the dst rq. If this energy difference is lesser
than zero the task is actually moved from src to dst rq.

cc: Ingo Molnar <mingo@redhat.com>
cc: Peter Zijlstra <peterz@infradead.org>

Signed-off-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
---
 kernel/sched/fair.c | 21 ++++++++++++++++++---
 1 file changed, 18 insertions(+), 3 deletions(-)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 0f8bac2..aa2bc73 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6094,12 +6094,12 @@ static int detach_tasks(struct lb_env *env)
 {
 	struct list_head *tasks = &env->src_rq->cfs_tasks;
 	struct task_struct *p;
-	unsigned long load;
+	unsigned long load = 0;
 	int detached = 0;
 
 	lockdep_assert_held(&env->src_rq->lock);
 
-	if (env->imbalance <= 0)
+	if (!env->use_ea && env->imbalance <= 0)
 		return 0;
 
 	while (!list_empty(tasks)) {
@@ -6120,6 +6120,20 @@ static int detach_tasks(struct lb_env *env)
 		if (!can_migrate_task(p, env))
 			goto next;
 
+		if (env->use_ea) {
+			struct energy_env eenv = {
+				.src_cpu = env->src_cpu,
+				.dst_cpu = env->dst_cpu,
+				.usage_delta = task_utilization(p),
+			};
+			int e_diff = energy_diff(&eenv);
+
+			if (e_diff >= 0)
+				goto next;
+
+			goto detach;
+		}
+
 		load = task_h_load(p);
 
 		if (sched_feat(LB_MIN) && load < 16 && !env->sd->nr_balance_failed)
@@ -6128,6 +6142,7 @@ static int detach_tasks(struct lb_env *env)
 		if ((load / 2) > env->imbalance)
 			goto next;
 
+detach:
 		detach_task(p, env);
 		list_add(&p->se.group_node, &env->tasks);
 
@@ -6148,7 +6163,7 @@ static int detach_tasks(struct lb_env *env)
 		 * We only want to steal up to the prescribed amount of
 		 * weighted load.
 		 */
-		if (env->imbalance <= 0)
+		if (!env->use_ea && env->imbalance <= 0)
 			break;
 
 		continue;
-- 
2.2.2

